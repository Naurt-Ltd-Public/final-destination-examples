<!DOCTYPE html>
<html>

<head>
    <title>Naurt Geocoder</title>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="https://unpkg.com/leaflet@1.7.1/dist/leaflet.css" />
    <style>
        #map {
            height: 100vh;
        }
    </style>
</head>

<body>
    <div id="map"></div>
    <script src="https://unpkg.com/leaflet@1.7.1/dist/leaflet.js"></script>
    <script>

        function getColor(type) {
            switch (type) {
                case 'naurt_door': return '#FF0000';
                case 'naurt_building': return '#9d79f2';
                case 'naurt_parking': return '#00FF00';
                default: return '#000000';
            }
        }

        function style(feature) {
            return {
                fillColor: getColor(feature.properties.naurt_type), weight: 2, opacity: 1, color: 'white', dashArray: '5', fillOpacity: 0.4
            };
        }

        function onEachFeatureCurry(address) {
            return function onEachFeature(feature, layer) {
                if (feature.properties) {
                    var popupContent = 'Type: ' + feature.properties.naurt_type;
                    if (feature.properties.naurt_type == 'naurt_building') {
                        popupContent += '<br>Address: ' + address;
                    }
                    layer.bindPopup(popupContent).openPopup();
                }
            }
        }



        var map = L.map('map').setView([0, 0], 2);
        L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', { maxZoom: 19, attribution: '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors' }).addTo(map);
        var response = #unsafeHTML(NaurtResponse);


        L.geoJSON(response["best_match"]["geojson"], { style: style, onEachFeature: onEachFeatureCurry(response["best_match"]["address"]) }).addTo(map);

        if ("additional_matches" in response) {
            for (const additionalMatch of response["additional_matches"]) {
                L.geoJSON(additionalMatch["geojson"], { style: style, onEachFeature: onEachFeatureCurry(additionalMatch["address"]) }).addTo(map);
            }
        }

        var bounds = L.geoJSON(response["best_match"]["geojson"]).getBounds();
        map.fitBounds(bounds);
    </script>
</body>


</html>